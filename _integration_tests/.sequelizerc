const fs = require('fs');
const path = require('path');

const env = process.env.NODE_ENV || 'sqlite';
const storage = process.env.DB_STORAGE;

module.exports = createStorageConfig();

function createStorageConfig() {
  if (env === 'postgres') {
    return writePostgresConfig();
  } else {
    return writeSqliteConfig();
  }
}

// When using postgres, we do no require any absolute paths, since we are using a config for a remote connection.
// So we can just point to the existing repository configs.
function writePostgresConfig() {

  const storageConfig = {
    'config': path.resolve('config', 'postgres', 'process_engine', `${storage}_repository.json`),
    'migrations-path': path.resolve('sequelize', `migrations', '${storage}`)
  }

  return storageConfig;
}

// When using SQLite, we require the absolute location of the storage we want to migrate.
// Since we are bound to use the sequelize-cli and therefore have no access to the bootstapper
// or the ioc container, we need to write our own config that points to the correct database.
function writeSqliteConfig() {

  const sqliteConfig = `{
    "info": "This file is auto generated and required by the sequelize-cli. Please do not remove.",
    "username": null,
    "password": null,
    "database": null,
    "host": null,
    "port": null,
    "dialect": "sqlite",
    "storage": "sqlite_repositories/${storage}.sqlite",
    "supportBigNumbers": true,
    "resetPasswordRequestTimeToLive": 12,
    "logging": false
  }`;

  fs.writeFileSync('./sequelize/sqlite_temp.json', sqliteConfig, 'utf-8');

  const storageConfig = {
    'config': path.resolve('sequelize', `${env}_temp.json`),
    'migrations-path': path.resolve('sequelize', 'migrations', `${storage}`)
  }

  return storageConfig;
}
