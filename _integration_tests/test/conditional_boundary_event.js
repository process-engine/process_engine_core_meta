'use strict';

const should = require('should');
const TestFixtureProvider = require('../dist/commonjs/test_fixture_provider').TestFixtureProvider;

describe.skip('Conditional Boundary Event - ', () => {

  let testFixtureProvider;

  const processKey = 'boundary_event_conditional';
  const startEventKey = 'StartEvent_1';
  const useAutoGeneratedCorrelationId = undefined;

  before(async () => {
    testFixtureProvider = new TestFixtureProvider();
    await testFixtureProvider.initializeAndStart();

    await testFixtureProvider.importProcessFiles([processKey]);
  });

  after(async () => {
    await testFixtureProvider.tearDown();
  });

  it('should return "lesser", if the initial token is lesser than or equal 4.', async () => {

    const result = await testFixtureProvider.executeProcess(processKey, startEventKey, useAutoGeneratedCorrelationId, 4);

    should(result).have.property('tokenPayload');
    should(result.tokenPayload.current).be.eql('lesser');
  });

  it('should return "greater", if the initial token is greater than or equal 6.', async () => {

    const result = await testFixtureProvider.executeProcess(processKey, startEventKey, useAutoGeneratedCorrelationId, 6);

    should(result).have.property('tokenPayload');
    should(result.tokenPayload.current).be.eql('greater');
  });
});
