'use strict';
const should = require('should');
const TestFixtureProver = require('../dist/commonjs').TestFixtureProvider;

describe('Error End Event - ', () => {

  let testFixtureProvider;

  const startEventId = 'StartEvent_1';
  const useAutoGeneratedCorrelationId = undefined;

  before(async () => {
    testFixtureProvider = new TestFixtureProver();
    await testFixtureProvider.initializeAndStart();

    const processDefFileList = [
      'error_end_event_test',
      'error_end_event_subprocess_call_activity_test',
      'error_end_event_call_activity_called_process',
    ];
    await testFixtureProvider.importProcessFiles(processDefFileList);
  });

  after(async () => {
    await testFixtureProvider.tearDown();
  });

  it('should throw a defined error, when the error end event is reached', async () => {

    const processModelId = 'error_end_event_test';
    const initialToken = {
      errorToThrow: 'defined_error',
    };

    try {
      await testFixtureProvider.executeProcess(processModelId, startEventId, useAutoGeneratedCorrelationId, initialToken);
    } catch (error) {
      should(error.code).be.eql('expectedError');
      should(error.name).be.eql('Expected Error');
    }
  });

  it('should throw an anonymous error, when the error end event is reached', async () => {

    const processModelId = 'error_end_event_test';
    const initialToken = {
      errorToThrow: 'anonymous_error',
    };

    try {
      await testFixtureProvider.executeProcess(processModelId, startEventId, useAutoGeneratedCorrelationId, initialToken);
    } catch (error) {
      should(error.name).be.eql('InternalServerError');
      should(error.message).be.eql('');
      should(error.code).be.eql(500);
    }
  });

  it('should execute a call activity which ends with an error boundary event', async () => {

    const processModelId = 'error_end_event_subprocess_call_activity_test';

    const initialToken = {
      test_scenario: 'call_activity',
    };

    try {
      await testFixtureProvider.executeProcess(processModelId, startEventId, useAutoGeneratedCorrelationId, initialToken);
    } catch (error) {
      should(error.name).be.equal('ExpectedError');
      should(error.code).be.equal('ErrorCode');
    }
  });

  it('should catch a Subprocess Error caused by an ErrorEndEvent with an ErrorBoundaryEvent', async () => {

    const processModelId = 'error_end_event_subprocess_call_activity_test';

    const initialToken = {
      test_scenario: 'sub_process',
    };

    const result = await testFixtureProvider.executeProcess(processModelId, startEventId, useAutoGeneratedCorrelationId, initialToken);
    const expectedResult = 'Error handled by sub process\'s error boundary event';

    should(result).have.property('currentToken');
    should(result.currentToken).have.property('current');
    should(result.currentToken.current).be.eql(expectedResult);
  });
});
